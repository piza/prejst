#!/usr/bin/env node

'use strict';

var Prejst = require('../src/prejst.js');
var version = require('../package.json').version;

var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;
var os = require('os');

var options = {};


var help = function () {
    var message = [
        '\x1B[7mPrejst - Template Compiler\x1B[27m',
        '',
        'Usage',
        '    prejst <path> [options]',
        '',
        'Options',
        [
            ' --output value  Defining an output directory',
            '--charset value  Charset, "utf-8" by default',
            '     --no-watch  Does not monitor template directory',
            '      --version  Print the Prejst version',
            '        --help   Display this help text'
        ].join('\n'),
        '',
        '\x1B[90m' + 'Documentation can be found at https://github.com/aui/Prejst' + '\x1B[39m'
    ];

    message = message.join('\n');
    process.stdout.write(message + '\n');
};



var base;
var value;
var userConfig;
var isWatch = true;
var isEditConfig = false;
var args = process.argv.slice(2);


if (args[0] && /^[^-]|\//.test(args[0])) {
    base = args.shift();
}


while (args.length > 0) {
    value = args.shift();
    switch (value) {

        // 监控修改
        case '-w':
        case '--watch':
            isWatch = true;
            break;

        case '--no-watch':
            isWatch = false;
            break;

        // 压缩代码
        case '--minify':
            options.minify = true;
            break;

        case '--no-minify':
            options.minify = false;
            break;

        // 输出目录
        case '--output':
            options.output = args.shift();
            break;

        // 模板编码
        case '--charset':
            options.charset = args.shift();
            break;

        case '--config':
            isEditConfig = true;
            break;

        // 显示帮助
        case '-h':
        case '--help':
            help();
            process.exit();
            break;

        // 版本号
        case '-v':
        case '--version':
            process.stdout.write(version + '\n');
            process.exit();
            break;

        default:

            if (!base) {
                base = value;
            }
    }
}


if (!base) {
    base = './';
}


if (!fs.existsSync(base)) {
    process.stdout.write('Error: directory does not exist\n');
    process.exit(1);
}


var Prejst = new Prejst(base, options);


Prejst.on('compileError', function (data) {
    if (!isWatch) {
        process.exit(1);
    }
});


userConfig = Prejst.saveConfig();


if (isEditConfig) {
    
    process.stdout.write('Open: ' + userConfig + '\n');

    exec(
        (/windows/i.test(os.type()) ? 'start' : 'open')
        + ' ' + userConfig, {timeout: 0}, function () {}
    );


} else {

    Prejst.buildAll();

    if (isWatch) {
        Prejst.watch();
    }
    
}

